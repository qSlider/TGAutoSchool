from django.core.management.base import BaseCommand
from django.db import IntegrityError
from telebot import TeleBot, types
from django.conf import settings
from django.contrib.auth.models import User
from bot.models import Question, Answer, IncorrectAnswer, CorrectAnswer  # –î–æ–¥–∞–π—Ç–µ CorrectAnswer
import random


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot = TeleBot(settings.TELEGRAM_BOT_API_KEY, threaded=False)

        user_states = {}

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            tests_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
            markup.add(tests_button)

            user_id = message.from_user.id
            user_name = message.from_user.username

            user_instance, created = User.objects.get_or_create(id=user_id, defaults={'username': user_name})

            bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ–ø–∞–≤ –¥–æ –Ω–∞—à–æ—ó –∞–≤—Ç–æ—à–∫–æ–ª–∏. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ?', reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
        def start_tests(message):
            questions = get_questions_for_user(message.chat.id)
            random.shuffle(questions)

            user_states[message.chat.id] = {
                'questions': questions[:3],
                'current_question_index': 0,
                'answered': False,
            }

            send_question(message.chat.id)

        def get_questions_for_user(telegram_id):
            incorrect_questions = [
                incorrect_answer.question for incorrect_answer in
                IncorrectAnswer.objects.filter(telegram_id=telegram_id)
            ]

            if incorrect_questions:
                return incorrect_questions
            return list(Question.objects.all())

        def send_question(chat_id):
            if chat_id in user_states:
                user_state = user_states[chat_id]
                questions = user_state['questions']
                index = user_state['current_question_index']

                if index < len(questions):
                    question = questions[index]
                    markup = types.InlineKeyboardMarkup()

                    for answer in question.answers.all():
                        markup.add(types.InlineKeyboardButton(answer.text, callback_data=f'answer_{answer.id}'))

                    if question.image:
                        bot.send_photo(chat_id, question.image, caption=f"{question.title}\n\n{question.description}",
                                       reply_markup=markup)
                    else:
                        bot.send_message(chat_id, f"{question.title}\n\n{question.description}", reply_markup=markup)

                    user_state['answered'] = False
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    replay_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
                    markup.add(replay_button)

                    bot.send_message(chat_id, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç?',
                                     reply_markup=markup)
                    del user_states[chat_id]
            else:
                bot.send_message(chat_id, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!')

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
        def start_new_test(message):
            if message.chat.id not in user_states:
                incorrect_questions = [
                    incorrect_answer.question for incorrect_answer in
                    IncorrectAnswer.objects.filter(telegram_id=message.chat.id)
                ]
                all_questions = list(Question.objects.all())
                if incorrect_questions:
                    questions_to_choose_from = incorrect_questions.copy()

                    while len(questions_to_choose_from) < 3:
                        random_question = random.choice(all_questions)
                        if random_question not in questions_to_choose_from:
                            questions_to_choose_from.append(random_question)
                else:
                    questions_to_choose_from = random.sample(all_questions, min(3, len(all_questions)))

                random.shuffle(questions_to_choose_from)

                user_states[message.chat.id] = {
                    'questions': questions_to_choose_from[:3],  # –ë–µ—Ä–µ–º–æ 3 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è
                    'current_question_index': 0,
                    'answered': False,
                }

                send_question(message.chat.id)
            else:
                bot.send_message(message.chat.id, '–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç. –ó–∞–∫—ñ–Ω—á—ñ—Ç—å –π–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–æ–≥–æ.')

        @bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
        def handle_answer(call):
            chat_id = call.message.chat.id

            if chat_id in user_states:
                user_state = user_states[chat_id]

                if user_state['answered']:
                    bot.send_message(chat_id, '–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.')
                    return

                answer_id = int(call.data.split('_')[1])
                answer = Answer.objects.get(id=answer_id)

                question = answer.question  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –ª–æ–≥—ñ–∫–∏

                if answer.is_correct:
                    bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
                    IncorrectAnswer.objects.filter(telegram_id=chat_id, question=question).delete()

                    # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    if add_correct_answer(chat_id, question):
                        bot.send_message(chat_id, '–í–∏ —á–∞—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')

                else:
                    correct_answer = question.answers.filter(is_correct=True).first()
                    bot.send_message(chat_id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer.text}.')
                    IncorrectAnswer.objects.get_or_create(telegram_id=chat_id, question=question)

                user_state['answered'] = True
                bot.edit_message_reply_markup(chat_id, call.message.message_id)
                user_state['current_question_index'] += 1
                send_question(chat_id)

        def add_correct_answer(telegram_id, question):
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            correct_count = CorrectAnswer.objects.filter(telegram_id=telegram_id, question=question).count()

            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç—Ä–∏—á—ñ
            if correct_count >= 2:  # –¢–æ–±—Ç–æ, —è–∫—â–æ —î 2 –∑–∞–ø–∏—Å–∏, —Ç—Ä–µ—Ç—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–¥–µ —Ç—Ä–µ—Ç—å–æ—é
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É CorrectAnswer
                CorrectAnswer.objects.create(telegram_id=telegram_id, question=question)
                return True
            return False

        bot.polling(none_stop=True)
