from django.core.management.base import BaseCommand
from django.db import IntegrityError
from telebot import TeleBot, types
from django.conf import settings
from django.contrib.auth.models import User
from bot.models import Question, Answer, IncorrectAnswer, Registration
import random


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot = TeleBot(settings.TELEGRAM_BOT_API_KEY, threaded=False)

        user_states = {}
        quanity_quiz = 20;

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            tests_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
            practice_button = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')
            markup.add(tests_button, practice_button)

            user_id = message.from_user.id
            user_name = message.from_user.username

            user_instance, created = User.objects.get_or_create(id=user_id, defaults={'username': user_name})

            bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ–ø–∞–≤ –¥–æ –Ω–∞—à–æ—ó –∞–≤—Ç–æ—à–∫–æ–ª–∏. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ?', reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
        def start_tests(message):
            questions = get_questions_for_user(message.chat.id)
            random.shuffle(questions)

            user_states[message.chat.id] = {
                'questions': questions[:quanity_quiz],
                'current_question_index': 0,
                'answered': False,
            }

            send_question(message.chat.id)

        @bot.message_handler(func=lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')
        def register_user(message):
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
            bot.register_next_step_handler(message, get_last_name)

        def get_last_name(message):
            first_name = message.text
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä–∏–∑–≤—ñ—â–µ:")
            bot.register_next_step_handler(message, lambda m: get_phone(m, first_name))

        def get_phone(message, first_name):
            last_name = message.text
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
            bot.register_next_step_handler(message, lambda m: get_email(m, first_name, last_name))

        def get_email(message, first_name, last_name):
            phone_number = message.text
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:")
            bot.register_next_step_handler(message, lambda m: save_registration(m, first_name, last_name, phone_number))

        def save_registration(message, first_name, last_name, phone_number):
            email = message.text
            try:
                registration_instance = Registration(
                    first_name=first_name,
                    last_name=last_name,
                    phone_number=phone_number,
                    email=email
                )
                registration_instance.save()
                bot.send_message(message.chat.id, "–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
            except Exception as e:
                bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

        def get_questions_for_user(telegram_id):
            incorrect_questions = [
                incorrect_answer.question for incorrect_answer in
                IncorrectAnswer.objects.filter(telegram_id=telegram_id)
            ]

            if incorrect_questions:
                return incorrect_questions
            return list(Question.objects.all())

        def send_question(chat_id):
            if chat_id in user_states:
                user_state = user_states[chat_id]
                questions = user_state['questions']
                index = user_state['current_question_index']

                if index < len(questions):
                    question = questions[index]
                    markup = types.InlineKeyboardMarkup()

                    for answer in question.answers.all():
                        markup.add(types.InlineKeyboardButton(answer.text, callback_data=f'answer_{answer.id}'))

                    if question.image:
                        bot.send_photo(chat_id, question.image, caption=f"{question.title}\n\n{question.description}",
                                       reply_markup=markup)
                    else:
                        bot.send_message(chat_id, f"{question.title}\n\n{question.description}", reply_markup=markup)

                    user_state['answered'] = False
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    replay_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
                    markup.add(replay_button)

                    bot.send_message(chat_id, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç?',
                                     reply_markup=markup)
                    del user_states[chat_id]
            else:
                bot.send_message(chat_id, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!')

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
        def start_new_test(message):
            if message.chat.id not in user_states:
                incorrect_questions = [
                    incorrect_answer.question for incorrect_answer in
                    IncorrectAnswer.objects.filter(telegram_id=message.chat.id)
                ]
                all_questions = list(Question.objects.all())
                if incorrect_questions:
                    questions_to_choose_from = incorrect_questions.copy()

                    while len(questions_to_choose_from) < quanity_quiz:
                        random_question = random.choice(all_questions)
                        if random_question not in questions_to_choose_from:
                            questions_to_choose_from.append(random_question)
                else:
                    questions_to_choose_from = random.sample(all_questions, min(quanity_quiz, len(all_questions)))

                random.shuffle(questions_to_choose_from)

                user_states[message.chat.id] = {
                    'questions': questions_to_choose_from[:quanity_quiz],
                    'current_question_index': 0,
                    'answered': False,
                }

                send_question(message.chat.id)
            else:
                bot.send_message(message.chat.id, '–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç. –ó–∞–∫—ñ–Ω—á—ñ—Ç—å –π–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–æ–≥–æ.')

        @bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
        def handle_answer(call):
            chat_id = call.message.chat.id

            if chat_id in user_states:
                user_state = user_states[chat_id]

                if user_state['answered']:
                    bot.send_message(chat_id, '–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.')
                    return

                answer_id = int(call.data.split('_')[1])
                answer = Answer.objects.get(id=answer_id)

                if answer.is_correct:
                    bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
                    IncorrectAnswer.objects.filter(telegram_id=chat_id, question=answer.question).delete()
                else:
                    correct_answer = answer.question.answers.filter(is_correct=True).first()
                    bot.send_message(chat_id,
                                     f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer.text}.')
                    IncorrectAnswer.objects.get_or_create(telegram_id=chat_id, question=answer.question)

                user_state['answered'] = True
                bot.edit_message_reply_markup(chat_id, call.message.message_id)
                user_state['current_question_index'] += 1
                send_question(chat_id)

        bot.polling(none_stop=True)
