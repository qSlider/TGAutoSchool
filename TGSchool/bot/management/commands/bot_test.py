from django.core.management.base import BaseCommand
from django.db import IntegrityError
from telebot import TeleBot, types
from django.conf import settings
from django.contrib.auth.models import User
from bot.models import Question, Answer, UserQuestionStats
import random

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot = TeleBot(settings.TELEGRAM_BOT_API_KEY, threaded=False)

        user_states = {}

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            tests_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
            markup.add(tests_button)

            user_id = message.from_user.id
            user_name = message.from_user.username

            user_instance, created = User.objects.get_or_create(id=user_id, defaults={'username': user_name})

            bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ–ø–∞–≤ –¥–æ –Ω–∞—à–æ—ó –∞–≤—Ç–æ—à–∫–æ–ª–∏. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ?', reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏')
        def start_tests(message):
            questions = list(Question.objects.all())
            random.shuffle(questions)

            user_states[message.chat.id] = {
                'questions': questions[:3],
                'current_question_index': 0,
                'answered': False,
                'answered_questions': set(),  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–∏—Ç–∞–Ω—å, –Ω–∞ —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
                'incorrect_questions': set(),  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–∏—Ç–∞–Ω—å –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
            }

            send_question(message.chat.id)

        def send_question(chat_id):
            if chat_id in user_states:
                user_state = user_states[chat_id]
                questions = user_state['questions']
                index = user_state['current_question_index']

                if index < len(questions):
                    question = questions[index]
                    markup = types.InlineKeyboardMarkup()

                    for answer in question.answers.all():
                        markup.add(types.InlineKeyboardButton(answer.text, callback_data=f'answer_{answer.id}'))

                    if question.image:
                        bot.send_photo(chat_id, question.image, caption=f"{question.title}\n\n{question.description}", reply_markup=markup)
                    else:
                        bot.send_message(chat_id, f"{question.title}\n\n{question.description}", reply_markup=markup)

                    user_state['answered'] = False
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    replay_button = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
                    markup.add(replay_button)

                    bot.send_message(chat_id, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç?', reply_markup=markup)

            else:
                bot.send_message(chat_id, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!')

        @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç')
        def start_new_test(message):
            user_state = user_states[message.chat.id]

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è
            all_questions = list(Question.objects.all())

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞ —è–∫—ñ –≤–∂–µ –±—É–ª–∏ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            answered_questions = user_state['answered_questions']

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
            incorrect_questions = user_state['incorrect_questions']

            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
            available_questions = [q for q in all_questions if q not in answered_questions]

            # –î–æ–¥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
            if incorrect_questions:
                available_questions += [q for q in incorrect_questions if q not in available_questions]

            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É
            random.shuffle(available_questions)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_states[message.chat.id] = {
                'questions': available_questions[:3],  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 3 –ø–∏—Ç–∞–Ω–Ω—è
                'current_question_index': 0,
                'answered': False,
                'answered_questions': answered_questions,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                'incorrect_questions': incorrect_questions,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            }

            send_question(message.chat.id)

        @bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
        def handle_answer(call):
            chat_id = call.message.chat.id

            if chat_id not in user_states:
                bot.send_message(chat_id, '–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏ —Ç–µ—Å—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç.')
                return

            user_state = user_states[chat_id]

            if user_state['answered']:
                bot.send_message(chat_id, '–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.')
                return

            answer_id = int(call.data.split('_')[1])
            answer = Answer.objects.get(id=answer_id)
            user = call.from_user

            user_instance = User.objects.filter(id=user.id).first()
            if user_instance is None:
                bot.send_message(chat_id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.')
                return

            stat, created = UserQuestionStats.objects.get_or_create(user=user_instance, question=answer.question)
            if answer.is_correct:
                bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
                stat.correct_answers += 1
            else:
                correct_answer = answer.question.answers.filter(is_correct=True).first()
                bot.send_message(chat_id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer.text}.')
                stat.incorrect_answers += 1
                user_state['incorrect_questions'].add(answer.question.id)  # –î–æ–¥–∞—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è

            stat.save()
            user_state['answered'] = True
            user_state['answered_questions'].add(answer.question.id)  # –î–æ–¥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–Ω–∏—Ö
            bot.edit_message_reply_markup(chat_id, call.message.message_id)
            user_state['current_question_index'] += 1
            send_question(chat_id)

        bot.polling(none_stop=True)
